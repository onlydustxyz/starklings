--- exercises/beginner/ex02.cairo	2022-05-11 14:05:48.000000000 +0200
+++ /tmp/tmp_exercises/beginner/test_ex02.cairo	2022-05-12 15:35:42.000000000 +0200
@@ -16,6 +16,10 @@
 # - size
 # Both members are of type `felt`
 # https://www.cairo-lang.org/docs/reference/syntax.html#structs
+struct Star:
+    member name : felt
+    member size : felt
+end
 
 @storage_var
 func dust(address : felt) -> (amount : felt):
@@ -23,6 +27,9 @@
 
 # TODO
 # Update the `star` storage to store `Star` instead of `felt`
+@storage_var
+func star(address : felt, slot : felt) -> (size : Star):
+end
 
 @storage_var
 func slot(address : felt) -> (slot : felt):
@@ -45,6 +52,21 @@
 # TODO
 # Update the `light_star` external so it take a `Star` struct instead of the amount of dust
 # Caller `dust` storage must be deducted form a amount equal to the star size
+@external
+func light_star{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(new_star : Star):
+    let (address) = get_caller_address()
+    let (current_amount) = dust.read(address)
+    assert_le(new_star.size, current_amount)
+    let (next_slot) = slot.read(address)
+
+    dust.write(address, current_amount - new_star.size)
+    star.write(address, next_slot, new_star)
+    slot.write(address, next_slot + 1)
+
+    a_star_is_born.emit(address, next_slot, new_star)
+
+    return ()
+end
 
 @view
 func view_dust{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(
@@ -65,6 +87,13 @@
 # TODO
 # Create a view for `star`
 # It must return an instance of `Star` instead of a `felt`
+@view
+func view_star{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(
+    address : felt, slot : felt
+) -> (star : Star):
+    let (res) = star.read(address, slot)
+    return (res)
+end
 
 #########
 # TESTS #
