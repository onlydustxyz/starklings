--- exercises/beginner/ex01.cairo	2022-05-11 14:05:48.000000000 +0200
+++ /tmp/tmp_exercises/beginner/test_ex01.cairo	2022-05-12 15:35:42.000000000 +0200
@@ -14,6 +14,13 @@
 # Create two storages `star` and `slot`
 # `slot` will map an `address` to the next available `slot` this `address` can use
 # `star` will map an `address` and a `slot` to a `size`
+@storage_var
+func slot(address : felt) -> (slot : felt):
+end
+
+@storage_var
+func star(address : felt, slot : felt) -> (size : felt):
+end
 
 # TODO
 # Create an event `a_star_is_born`
@@ -22,6 +29,9 @@
 # - the `slot` where this `star` has been registered
 # - the size of the given `star`
 # https://starknet.io/documentation/events/
+@event
+func a_star_is_born(account : felt, slot : felt, size : felt):
+end
 
 @external
 func collect_dust{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(amount : felt):
@@ -43,13 +53,21 @@
 ):
     # TODO
     # Get the caller address
+    let (address) = get_caller_address()
     # Get the amount on dust owned by the caller
+    let (current_amount) = dust.read(address)
     # Make sure this amount is at least equal to `dust_amount`
+    assert_le(dust_amount, current_amount)
     # Get the caller next available `slot`
+    let (next_slot) = slot.read(address)
     # Update the amount of dust owned by the caller
+    dust.write(address, current_amount - dust_amount)
     # Register the newly created star, with a size equal to `dust_amount`
+    star.write(address, next_slot, dust_amount)
     # Increment the caller next available slot
+    slot.write(address, next_slot + 1)
     # Emit an `a_star_is_born` even with appropiate valued
+    a_star_is_born.emit(address, next_slot, dust_amount)
 
     return ()
 end
@@ -64,6 +82,21 @@
 
 # TODO
 # Write two views, for the `star` and `slot` storages
+@view
+func view_slot{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(
+    address : felt
+) -> (amount : felt):
+    let (res) = slot.read(address)
+    return (res)
+end
+
+@view
+func view_star{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(
+    address : felt, slot : felt
+) -> (amount : felt):
+    let (res) = star.read(address, slot)
+    return (res)
+end
 
 #########
 # TESTS #
